#!/bin/sh

# Welcome to the laptop.py script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift
  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      chsh -s "$(which zsh)"
    ;;
esac

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_cask_install() {
  brew cask install "$1" > /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  fancy_echo "Restarting %s ..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    sudo gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    sudo gem install "$@"
    rbenv rehash
  fi
}

pip_install_or_update() {
  if pip freeze list | grep "$1" ; then
    fancy_echo "Updating %s ..." "$1"
    sudo pip install --upgrade "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    sudo pip install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

brew_install_or_upgrade 'git'
brew_install_or_upgrade 'wget'
brew_install_or_upgrade 'redis'
brew_launchctl_restart 'redis'
brew_install_or_upgrade 'the_silver_searcher'
brew_install_or_upgrade 'vim'
brew_install_or_upgrade 'ctags'
brew_install_or_upgrade 'tmux'
brew_install_or_upgrade 'reattach-to-user-namespace'
brew_install_or_upgrade 'imagemagick'
brew_install_or_upgrade 'qt'
brew_install_or_upgrade 'hub'
brew_install_or_upgrade 'bash-completion'
brew_install_or_upgrade 'chromedriver'
brew_install_or_upgrade 'zsh-completions'
brew_install_or_upgrade 'zsh-syntax-highlighting'
brew_install_or_upgrade 'hiredis'
brew_install_or_upgrade 'rbenv'
brew_install_or_upgrade 'node'
brew_install_or_upgrade 'npm'
brew_install_or_upgrade 'nodenv'
brew_install_or_upgrade 'ruby-build'
brew_install_or_upgrade 'fabric'


# shellcheck disable=SC2016
append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1

brew_install_or_upgrade 'openssl'
brew unlink openssl && brew link openssl --force
brew_install_or_upgrade 'libyaml'

fancy_echo 'Installing the Python package manager pip'
curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | python2.7


pip_install_or_update "pillow"
pip_install_or_update "hiredis"
pip_install_or_update "virtualenvwrapper"

sudo gem install 'foreman'
sudo gem install 'puppet'

# Configuration options for cloud based services
printf "Which of the following cloud service(s) do you which to configure: \n
1. Google App Engine
2. IBM Bluemix
3. Heroku
4. Amazon AWS
\nSelect all the number(s) that applies, seperated by a space: "

read CHOICES
for CHOICE in $CHOICES ; do
  #statements
  if [[ "$CHOICE" = 1 ]]; then
      fancy_echo 'Installing Google Cloud Utilities'

      curl https://sdk.cloud.google.com | bash
      # pip_install_or_update 'gcloud'

  elif [[ "$CHOICE" = 2 ]]; then
    fancy_echo 'Installing Cloud Foundry CLI tools'
    brew_install_or_upgrade 'cf'

  elif [[ "$CHOICE" = 3 ]]; then
    brew_install_or_upgrade 'heroku-toolbelt'

  elif [[ "$CHOICE" = 4 ]]; then
    brew_install_or_upgrade 'aws-elasticbeanstalk'

    fancy_echo "Installing Kubernetes CLI tools"
    brew_install_or_upgrade 'kubernetes-cli'
    fancy_echo "Installing AWS CLI tools"
    brew_install_or_upgrade 'awscli'
  else
    break
  fi
done

# Configuration options for Relational databases
printf "Which of the following Relational DBs do you which to configure: \n
1. Postgres (Recommended)
2. MySQL
3. MariaDB
\nSelect all the number(s) that applies, seperated by a space: "

read CHOICES
for CHOICE in $CHOICES ; do
  #statements
  if [[ "$CHOICE" = 1 ]]; then
    fancy_echo 'Installing the Postgres Database'
    brew_install_or_upgrade 'postgres'
    brew_launchctl_restart 'postgresql'
    pip_install_or_update "psycopg2"
  elif [[ "$CHOICE" = 2 ]]; then
    fancy_echo 'Installing MySQL Database'
    brew_install_or_upgrade 'mysql'
    pip_install_or_update 'mysql-python'
  elif [[ "$CHOICE" = 3 ]]; then
    fancy_echo 'Installing MariaDB Database'
    brew_install_or_upgrade 'mariadb'
    pip_install_or_update 'mysql-python'

  else
    fancy_echo 'Skipping Relational database installation'
    break
  fi
done

# Configuration options for Document-based databases
printf "Which of the following NoSQL databases do you which to configure: \n
1. MongoDB (Recommended)
2. CouchDB
3. OrientDB
4. ArrangoDB
5. DynamoDB
6. RethinkDB
\nSelect all the number(s) that applies, seperated by a space: "

read CHOICES
for CHOICE in $CHOICES ; do
  #statements
  if [[ "$CHOICE" = 1 ]]; then
    fancy_echo 'Installing the MondoDB'
    brew_install_or_upgrade 'mongodb'
    pip_install_or_update 'PyMongo'
    fancy_echo 'Installing MongoEngine ORM...'
    pip_install_or_update 'mongoengine'
  elif [[ "$CHOICE" = 2 ]]; then
    fancy_echo 'Installing CouchDB'
    brew_install_or_upgrade 'couchdb'

  elif [[ "$CHOICE" = 3 ]]; then
    fancy_echo 'Installing OrientDB'
    brew_install_or_upgrade 'orientdb'

  elif [[ "$CHOICE" = 4 ]]; then
    fancy_echo 'Installing ArrangoDB'
    brew_install_or_upgrade 'arrangodb'

  elif [[ "$CHOICE" = 5 ]]; then
    fancy_echo 'Installing DynamoDB'
    brew_install_or_upgrade 'dynamodb-local'

  elif [[ "$CHOICE" = 6 ]]; then
    fancy_echo 'Installing RethinkDB'
    brew_install_or_upgrade 'rethinkdb'

  else
    fancy_echo 'Skipping NoSQL database installation'
    break
  fi
done

# Configuration options for Memched Datastore
printf "Which of the following Task queues do you which to configure: \n
1. RabbitMQ
2. ZeroMQ (Recommended)
3. ActiveMQ
\nSelect all the number(s) that applies, seperated by a space: "

read CHOICES
for CHOICE in $CHOICES ; do
  #statements
  if [[ "$CHOICE" = 1 ]]; then
    fancy_echo 'Installing the RabbitMQ'
    brew_install_or_upgrade 'rabbitmq'
  elif [[ "$CHOICE" = 2 ]]; then
    fancy_echo 'Installing ZeroMQ'
    brew_install_or_upgrade 'zeromq'

  elif [[ "$CHOICE" = 3 ]]; then
    fancy_echo 'Installing ActiveMQ'
    brew_install_or_upgrade 'activemq'

  else
    fancy_echo 'Skipping Datastore installation'
    break
  fi
done

printf "Install the Google Chrome (y/N): "
READ CHOICE

if [ "$CHOICE" = 'y' ]; then
  brew_cask_install 'google-chrome'
fi

printf "Install the docker container (y/N): "
READ CHOICE

if [ "$CHOICE" = 'y' ]; then
  brew_install_or_upgrade 'docker'
  brew_install_or_upgrade 'boot2docker'
  brew_install_or_upgrade 'docker-compose'
  fancy_echo "Do you want a GUI tools for managing your Docker containers (y/N): "
  read INPUT
  if [[ "$INPUT" = 'y' ]]; then
    #statements
    brew_install_or_upgrade 'unzip'
    curl -O http://files.bernard.com.ng/Kitematic.zip
    unzip kitematic.zip
    mv ./Kitematic\ \(Beta\).app ~/Applications
  fi
fi

if ! command -v rcup >/dev/null; then
  brew_tap 'thoughtbot/formulae'
  brew_install_or_upgrade 'rcm'
fi

fancy_echo "Installing and updating Python packages"
pip_install_or_update "pew"
pip_install_or_update "python-dateutil"
pip_install_or_update 'coverage'

fancy_echo "Installing Python testing Utilities"
pip_install_or_update 'selenium'
pip_install_or_update 'coverage'

brew_install_or_upgrade "chromedriver"
printf "Do you want to configure your docker container now (y/N): "
READ CHOICE

if [ "$CHOICE" = 'y' ]; then
  fancy_echo 'What name would your want for your container: '
  read name
  if [[ "$#" -ne 1 ]]; then
    boot2docker init
  else
    boot2docker init --vm "$name"
  fi
  boot2docker start
  $(boot2docker shellinit)
fi

printf "Setup a Virtual Environment (y/N): "
READ CHOICE

if [ "$CHOICE" = 'y' ]; then
  fancy_echo 'What name would your want for your virtualenv (env): '
  read ARG
  if [[ "$#" -ne 1 ]]; then
    ARG = env
    mkvirtualenv "$ARG"
  else
    mkvirtualenv "$ARG"
  workon "$ARG"
  fi

  fancy_echo "Which of the following Python web frameworks do you want to deploy:
   1. Django
   2. Flask
   3. TurboGears
   4. Bluebream / Zope 3
   5. CherryPy
   6. Web2Py
   \n Enter only one number from (1 - 6): "
  read CHOICE
  if [[ "$CHOICE" = 1 ]]; then
    #statements
    pip install --upgrade 'django'
  elif [[ "$CHOICE" = 2 ]]; then
    pip install --upgrade 'flask'
  elif [[ "$CHOICE" = 3 ]]; then
    pip install --upgrade 'tg.devtools'
  elif [[ "$CHOICE" = 4 ]]; then
    pip install --upgrade 'bluebream'
  elif [[ "$CHOICE" = 5]]; then
    pip install --upgrade 'cherrypy'
  elif [[ "$CHOICE" = 6 ]]; then
    pip install --upgrade 'web2py'
  else
    fancy_echo 'Skipping installation of web frameworks. :)'
  fi
fi

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi
fancy_echo "Your super machine have being made more awesome!
You can always run this script again to install components your skipped during this installation.
Installed packages will be ignored!
enjoy :)"